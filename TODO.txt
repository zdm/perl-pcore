- cleanup API methods;


- authentication tags;
- app permissions, auth_app, etc...;
- API auth - CRUD methods ???;

- api protocol:
    - runas => [ $token_type, $token_id, $private_token ];

-----------------------------------------------------------------------------------------------

- EventBus conception:
    - single, universal in-process EventBus;
    - for logging or other listeners and event types;
    - external processes can subscribe to events using websocket connection;

- APP & APP API:
    - move roles and permissions from API to App;
    - auth tags;
    - stack similar requests everywhere;

    - blocking api call;
    - api client - blocking call;
    - blocking api auth methods;

- RPC
    - combine RPC + WebSocket;
        - bidirectional API protocol;
        - WebSocket message broker;

- SQL:
    - error handling;
    - return API response;
    - handy way to specify bind param type for execeute;
        - update SQLite BLOB fields;

- LOG SUBSYSTEM:
    - write logs to socket;

- HANDLE and PROXY refactoring
    - rename -> timeout -> http_timeout, keepalive_timeout -> http_keep...;
    - http_timeout works incorrectly, should be timeout for whole request, currently only timeout between read operation;
    - use common connection status + reason errors registry, read headers error, connet error, proxy errors, etc ...;

    - pcore::ae::handle - use reason instead of message in error callbacks;
    - http - do not use header object, use direct cache;
    - persistent -> keepalive_timeout in HTTP client;
