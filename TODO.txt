- redesign HTTP ua;
    - cookies - remove support for pub. suffixes, this is useless overhead;
	- rename cookie_jar -> cookies;

    - remove Pcore::HTTP::Message;
    - headers shoud be always ArrayRef and in 'Header-Name' format;

- HTTP handle should return errors using standard result object;

- websocket - rename error -> on_connect_error;
    - make pong return scalar instead of ref;
    - make ping accept scalar instead of ref;
    - auth client memory leak - websocket not destroyed on undef;
    - on_disconnect should be called everytinme on disconnect;

- redesign error log;

- use cookie for session token;
- remove basic auth;

- docker API - Attempt to access disallowed key '2' in a restricted hash at d:/projects/pcore/lib/Pcore/API/DockerHub/Repository/Build.pm line 25.;


- rewiew API methods;
- auth cache + EventBus;
- authentication tags;


- API applications connector;

- app permissions, auth_app, etc...;

- api protocol:
    - runas => [ $token_type, $token_id, $private_token ];

-----------------------------------------------------------------------------------------------

- use qq[] instead of " in Pcore dump to quote strings;

- PAR:
    - PAR - DSO auto scan;

- APP & APP API:
    - move roles and permissions from API to App;
    - auth tags;
    - stack similar requests everywhere;

    - blocking api call;
    - api client - blocking call;
    - blocking api auth methods;

- RPC
    - combine RPC + WebSocket;
        - bidirectional API protocol;
        - WebSocket message broker;

- SQL:
    - error handling;
    - return API response;
    - handy way to specify bind param type for execeute;
        - update SQLite BLOB fields;

- HANDLE and PROXY refactoring
    - rename -> timeout -> http_timeout, keepalive_timeout -> http_keep...;
    - http_timeout works incorrectly, should be timeout for whole request, currently only timeout between read operation;
    - use common connection status + reason errors registry, read headers error, connet error, proxy errors, etc ...;

    - pcore::ae::handle - use reason instead of message in error callbacks;
    - http - do not use header object, use direct cache;
    - persistent -> keepalive_timeout in HTTP client;
