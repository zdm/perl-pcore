- PAR:
    - PAR - DSO auto scan;
    - remove pcore.perl;
    - store only main module with uniq path as deps;
    - always pack perl to par;

- review run_proc mem leaks;
- proc should return result object on exit;


- windows - create process + sockets for STD*;
    - https://www.princexml.com/forum/topic/3545/read-from-stdin-socket;
    - AnyEvent::Handle - works with windows pipes;
		Actually, you can redirect IO to sockets. Just make sure you open the socket with WSASocket instead of socket(), and do NOT specify the WSA_FLAG_OVERLAPPED.

		The reason for this is a bit involved.
		Any "Standard Handles" that you supply to CreateProcess for I/O redirection must be non-overlapped (i.e, do not support overlapped I/O).
		sockets on Windows are opened overlapped when created with socket() and non-overlapped if created as above with WSASocket.

		Вызов функции socket эквивалентен вызову функции WSASocket с флагом WSA_FLAG_OVERLAPPED, который показывает, что данный сокет можно использовать для перекрытого ввода-вывода (см. разд. 2.2.9).

# define SO_SYNCHRONOUS_ALERT        0x10
# define SO_SYNCHRONOUS_NONALERT     0x20 <--- we need this option






- redesign error log;

- Pcore::AE::Handle2:
    - handle should return errors using standard result object;

- redesign HTTP ua;
    - cookies - remove support for pub. suffixes, this is useless overhead;
    - headers shoud be always ArrayRef and in 'Header-Name' format;
    - http_timeout works incorrectly, should be timeout for whole request, currently only timeout between read operation;
    - use common connection status + reason errors registry, read headers error, connet error, proxy errors, etc ...;

- use cookie for session token;
- remove basic auth;

- error add/remove dist files after committing wiki;
- docker API - Attempt to access disallowed key '2' in a restricted hash at d:/projects/pcore/lib/Pcore/API/DockerHub/Repository/Build.pm line 25.;
- commit error, when committing not from root dir, eg. p doc -f devel from data dir;


- rewiew API methods;
- auth cache + EventBus;
- authentication tags;


- API applications connector;

- app permissions, auth_app, etc...;

- api protocol:
    - runas => [ $token_type, $token_id, $private_token ];

-----------------------------------------------------------------------------------------------

- use qq[] instead of " in Pcore dump to quote strings;

- websocket RPC bin protocol:
    - [headers length, cbor headers, cbor body];
    - allows to decode headers and return body to client;

- APP & APP API:
    - move roles and permissions from API to App;
    - auth tags;
    - stack similar requests everywhere;

    - blocking api call;
    - api client - blocking call;
    - blocking api auth methods;

- SQL:
    - error handling;
    - return API response;
    - handy way to specify bind param type for execeute;
        - update SQLite BLOB fields;

- HANDLE and PROXY refactoring
    - rename -> timeout -> http_timeout, keepalive_timeout -> http_keep...;

    - pcore::ae::handle - use reason instead of message in error callbacks;
    - http - do not use header object, use direct cache;
